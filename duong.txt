static ssize_t device_read(struct file *filp, char *buffer, size_t length, loff_t *offset)
{
    struct skcipher_request *req;
    struct scatterlist sg_in, sg_out;
    char decrypted_data[BUFFER_SIZE];
    int ret;

    if (length > BUFFER_SIZE)
    {
        printk(KERN_INFO "Data size exceeds buffer size.\n");
        return -EINVAL;
    }

    req = skcipher_request_alloc(tfm, GFP_KERNEL);
    if (!req)
    {
        printk(KERN_INFO "Failed to allocate request.\n");
        return -ENOMEM;
    }

    sg_init_one(&sg_in, buffer, length);
    sg_init_one(&sg_out, decrypted_data, length);

    skcipher_request_set_crypt(req, &sg_in, &sg_out, length, encryption_key);

    ret = crypto_skcipher_decrypt(req);
    if (ret)
    {
        printk(KERN_INFO "Decryption failed.\n");
        skcipher_request_free(req);
        return ret;
    }

    skcipher_request_free(req);

    if (copy_to_user(buffer, decrypted_data, length))
    {
        printk(KERN_INFO "Failed to copy decrypted data to userspace.\n");
        return -EFAULT;
    }

    printk(KERN_INFO "Data decrypted and sent back to userspace.\n");
    return length;
}

static ssize_t device_write(struct file *filp, const char *buffer, size_t length, loff_t *offset)
{
    struct skcipher_request *req;
    struct scatterlist sg_in, sg_out;
    char encrypted_data[BUFFER_SIZE];
    int ret;

    if (length > BUFFER_SIZE)
    {
        printk(KERN_INFO "Data size exceeds buffer size.\n");
        return -EINVAL;
    }

    if (copy_from_user(encryption_key, buffer, KEY_SIZE))
    {
        printk(KERN_INFO "Failed to copy key from userspace.\n");
        return -EFAULT;
    }

    req = skcipher_request_alloc(tfm, GFP_KERNEL);
    if (!req)
    {
        printk(KERN_INFO "Failed to allocate request.\n");
        return -ENOMEM;
    }

    sg_init_one(&sg_in, buffer + KEY_SIZE, length - KEY_SIZE);
    sg_init_one(&sg_out, encrypted_data, length - KEY_SIZE);

    skcipher_request_set_crypt(req, &sg_in, &sg_out, length - KEY_SIZE, encryption_key);

    ret = crypto_skcipher_encrypt(req);
    if (ret)
    {
        printk(KERN_INFO "Encryption failed.\n");
        skcipher_request_free(req);
        return ret;
    }

    skcipher_request_free(req);

    if (copy_to_user((char *)buffer + KEY_SIZE, encrypted_data, length - KEY_SIZE))
    {
        printk(KERN_INFO "Failed to copy encrypted data to userspace.\n");
        return -EFAULT;
    }

    printk(KERN_INFO "Data encrypted and sent back to userspace.\n");
    return length;
}